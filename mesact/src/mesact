#!/usr/bin/env python3

"""
To Do:

Store Connector used for building config

"""
VERSION = '0.6.3'

import sys, os, traceback
from functools import partial

from PyQt5.QtCore import QTimer
from PyQt5 import QtCore, uic, QtWidgets
from PyQt5.QtWidgets import (QApplication, QMainWindow, QMessageBox,
	QDialog, qApp, QProgressBar)
from PyQt5.QtGui import QPixmap

from libmesact.ui_mesact import Ui_mainWindow
from libmesact import startup
from libmesact import boards
from libmesact import utilities
from libmesact import buildcombos
from libmesact import buildmenus
from libmesact import firmware
from libmesact import card
from libmesact import loadini
from libmesact import checkconfig
from libmesact import buildconfig
from libmesact import extcmd
from libmesact import pcinfo
from libmesact import updates
from libmesact import helptext
from libmesact.help import Ui_Dialog as helpDialog
from libmesact.about import Ui_about as aboutDialog
from libmesact.ui_mesact import Ui_mainWindow

class VersionError(QMainWindow):
	def __init__(self):
		super(VersionError, self).__init__()
		print('wrong python version')
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle('Version Error')
		msgBox.setText(f'Python 3.6 or newer is required.\nYour Python is {sys.version[0:3]}')
		msgBox.setStandardButtons(QMessageBox.Ok)
		msgBox.exec()
		sys.exit()

class MainWindow(QMainWindow, Ui_mainWindow):
	def __init__(self):
		super().__init__()
		self.setupUi(self) # needed to load Ui_MainWindow
		self.trans = QtCore.QTranslator(self)
		if os.path.split(sys.argv[0])[0] == '/usr/bin':
			self.lib_path = '/usr/lib/libmesact'
			self.firmware_path = '/usr/lib/libmesact'
			self.image_path = '/usr/lib/libmesact'
			self.docs_path = '/usr/lib/libmesact'

		if os.path.split(sys.argv[0])[0] == '.':
			srcPath = os.path.split(os.path.realpath(sys.argv[0]))[0]
			self.lib_path = os.path.join(srcPath, 'libmesact')
			self.firmware_path = os.path.join(srcPath, 'firmware')
			self.image_path = os.path.join(srcPath, 'images')
			self.docs_path = os.path.join(srcPath, 'manuals')
		sys.excepthook = self.excepthook
		self.version = VERSION
		self.emcVersion = '1.1'
		self.setWindowTitle(f'Mesa Configuration Tool Version {self.version}')
		self.progressBar = QProgressBar()
		self.statusBar().addPermanentWidget(self.progressBar)
		#self.progressBar.setGeometry(30, -10, 200, 35) does nothing
		#self.progressBar.setValue(50)
		self.board = '' # main board
		self.card = '' # daughter card
		self.boardType = '' # pci or eth
		self.device = '' # needed for mesaflash
		self.cardType_0 = '' # step or servo
		self.cardType_1 = '' # step or servo
		self.fw = firmware
		self.password = None
		self.axes = 0
		self.timer=QTimer()
		buildcombos.build(self)
		buildmenus.build(self)
		utilities.setup(self)
		#utilities.checks(self)
		self.helpInfo = helptext.descriptions

		self.extcmd = extcmd.extcmd()
		#self.ladderOptionsList = utilities.plcOptions()
		self.setupConnections()
		self.show()
		startup.checkconfig(self)

	def setupConnections(self):
		# Menu Items
		self.actionEnglish.triggered.connect(partial(self.change_language, None))
		self.actionGerman.triggered.connect(partial(self.change_language, 'eng-de'))
		self.actionFrench.triggered.connect(partial(self.change_language, 'eng-fr'))
		self.actionOpen.triggered.connect(partial(loadini.openini, self))
		self.actionCheck.triggered.connect(partial(checkconfig.checkit, self))
		self.actionBuild.triggered.connect(partial(buildconfig.build, self))
		self.actionTabHelp.triggered.connect(partial(self.help, 0))
		self.actionCheckUpdates.triggered.connect(partial(updates.checkUpdates, self))
		self.actionDownloadDeb.triggered.connect(partial(updates.downloadDeb, self))
		self.actionDownloadZip.triggered.connect(partial(updates.downloadtZip, self))
		self.actionDocuments.triggered.connect(partial(updates.showDocs, self, 'mesact.pdf'))
		self.timer.timeout.connect(partial(updates.clearProgressBar, self))

		# Machine Group
		self.configName.textChanged[str].connect(partial(utilities.configNameChanged, self))
		self.linearUnitsCB.currentIndexChanged.connect(partial(utilities.unitsChanged, self))
		self.trajMaxLinVelDSB.valueChanged.connect(partial(utilities.maxVelChanged, self))
		self.boardCB.currentIndexChanged.connect(partial(boards.boardChanged, self))
		self.firmwareCB.currentIndexChanged.connect(partial(utilities.firmwareChanged, self))
		for i in range(2):
			getattr(self, f'daughterCB_{i}').currentIndexChanged.connect(partial(utilities.daughterCardChanged, self))

		# Board Group
		self.checkBoardPB.clicked.connect(partial(card.checkCard, self))

		# Firmware Group
		self.readpdPB.clicked.connect(partial(card.readpd, self))
		self.readhmidPB.clicked.connect(partial(card.readhmid, self))
		self.flashPB.clicked.connect(partial(card.flashCard, self))
		self.reloadPB.clicked.connect(partial(card.reloadCard, self))
		self.verifyPB.clicked.connect(partial(card.verifyCard, self))
		self.copyPB.clicked.connect(partial(utilities.copyOutput, self))

		# Axes Tabs
		for i in range(6):
			for j in range(2):
				getattr(self, f'c{j}_axisCB_{i}').currentIndexChanged.connect(partial(utilities.axisChanged, self))
				getattr(self, f'c{j}_scale_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
				getattr(self, f'c{j}_maxVelocity_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
				getattr(self, f'c{j}_maxAccel_{i}').textChanged.connect(partial(utilities.updateAxisInfo, self))
				getattr(self, f'c{j}_ferrorDefault_{i}').clicked.connect(partial(utilities.ferrorSetDefault, self))
				getattr(self, f'c{j}_pidDefault_{i}').clicked.connect(partial(utilities.pidSetDefault, self))
				getattr(self, f'c{j}_analogDefault_{i}').clicked.connect(partial(utilities.analogSetDefault, self))
				getattr(self, f'c{j}_driveCB_{i}').currentIndexChanged.connect(partial(utilities.driveChanged, self))

		# I/O Tab
		for i in range(32):
			getattr(self, f'inputInvertCB_{i}').stateChanged.connect(partial(utilities.inputChanged, self))
			getattr(self, f'inputDebounceCB_{i}').stateChanged.connect(partial(utilities.inputChanged, self))

		# Info Tab
		pixmap = QPixmap(os.path.join(self.image_path, '7i33-card.png'))
		self.card7i33LB.setPixmap(pixmap)
		pixmap = QPixmap(os.path.join(self.image_path, '7i37-card.png'))
		self.card7i37LB.setPixmap(pixmap)
		pixmap = QPixmap(os.path.join(self.image_path, '7i47-card.png'))
		self.card7i47LB.setPixmap(pixmap)
		pixmap = QPixmap(os.path.join(self.image_path, '7i48-card.png'))
		self.card7i48LB.setPixmap(pixmap)
		pixmap = QPixmap(os.path.join(self.image_path, '7i76-card.png'))
		self.card7i76LB.setPixmap(pixmap)
		pixmap = QPixmap(os.path.join(self.image_path, '7i77-card.png'))
		self.card7i77LB.setPixmap(pixmap)
		pixmap = QPixmap(os.path.join(self.image_path, '7i85-card.png'))
		self.card7i85LB.setPixmap(pixmap)
		pixmap = QPixmap(os.path.join(self.image_path, '7i88-card.png'))
		self.card7i88LB.setPixmap(pixmap)

		self.OpenManPB_0.clicked.connect(partial(updates.showDocs, self, self.mainBoardDocsCB))
		self.OpenManPB_1.clicked.connect(partial(updates.showDocs, self, self.comboBoardDocsCB))
		self.OpenManPB_2.clicked.connect(partial(updates.showDocs, self, self.dauCardDocsCB))
		self.OpenManPB_3.clicked.connect(partial(updates.showDocs, self, self.ssCardDocsCB))
		self.OpenManPB_4.clicked.connect(partial(updates.showDocs, self, self.otherDocsCB))

		# Display Tab
		self.minLinJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.defLinJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.maxLinJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.minAngJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.defAngJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))
		self.maxAngJogVelDSB.valueChanged.connect(partial(utilities.unitsChanged, self))

		# Spindle Tab
		self.pidDefault_s.clicked.connect(partial(utilities.pidSetDefault, self))
		self.spindleTypeCB.currentIndexChanged.connect(partial(utilities.spindleChanged, self))
		self.spindleFeedbackCB.currentIndexChanged.connect(partial(utilities.spindleFeedbackChanged, self))
		self.spindleDriveCB.currentIndexChanged.connect(partial(utilities.driveChanged, self))
		self.spindleMinRpm.valueChanged.connect(partial(utilities.spindleSettingsChanged, self))
		self.spindleMaxRpm.valueChanged.connect(partial(utilities.spindleSettingsChanged, self))
		self.spindleMaxAccel.valueChanged.connect(partial(utilities.spindleSettingsChanged, self))

		# Smart Serial Tab
		self.ssCardCB.currentIndexChanged.connect(partial(utilities.ssCardChanged, self))

		# Pins Tab
		self.cardPinsPB.clicked.connect(partial(card.getCardPins, self))

		# PC Tab
		self.cpuPB.clicked.connect(partial(pcinfo.cpuInfo, self))
		self.nicPB.clicked.connect(partial(pcinfo.nicInfo, self))
		self.calcNicPB.clicked.connect(partial(pcinfo.nicCalc, self))
		self.readTmaxPB.clicked.connect(partial(pcinfo.readTmax, self))

	def change_language(self, translationFile = None):
		#print(self.sender().text())
		if translationFile is not None:
			self.trans.load(os.path.join(self.lib_path, translationFile))
			QtWidgets.QApplication.instance().installTranslator(self.trans)
			self.retranslateUi(self)
		else:
			QtWidgets.QApplication.instance().removeTranslator(self.trans)
			self.retranslateUi(self)

	def errorMsg(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Cancel | QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def errorMsgOk(self, text, title=None):
		msgBox = QMessageBox()
		msgBox.setIcon(QMessageBox.Warning)
		msgBox.setWindowTitle(title)
		msgBox.setText(text)
		msgBox.setStandardButtons(QMessageBox.Ok)
		returnValue = msgBox.exec()
		if returnValue == QMessageBox.Ok:
			return True
		else:
			return False

	def help(self, index = False):
		dialog = QtWidgets.QDialog()
		dialog.ui = helpDialog()
		dialog.ui.setupUi(dialog)
		dialog.ui.toClipboard.clicked.connect(partial(utilities.copyhelp, dialog.ui, self))
		if index:
			dialog.ui.helpPTE.setPlainText(self.helpInfo(index))
		else:
			index = self.mainTabs.currentIndex()
			if index == 5:
				tab = {0: 50, 1: 51, 2:52, 3:53, 4:54, 5:55, 6:56, 7:57, 8:58}
				dialog.ui.helpPTE.setPlainText(self.helpInfo(tab[self.smartSerialSW.currentIndex()]))
			else:
				dialog.ui.helpPTE.setPlainText(self.helpInfo(self.mainTabs.currentIndex()))
		dialog.exec_()

	def excepthook(self, exception_type, exception_value, tb):
		while tb:
			filename = os.path.basename(tb.tb_frame.f_code.co_filename)
			name = tb.tb_frame.f_code.co_name
			line_no = tb.tb_lineno
			local_vars = tb.tb_frame.f_locals
			tb = tb.tb_next
		print(f"File {filename} line {line_no}, in {name}")
		print(f'{traceback.format_exception(exception_type, exception_value, tb)}')
		error = traceback.format_exception(exception_type, exception_value, tb)[0].split(None, 1)[1]
		#print(error)
		#print(f'exception_type: {exception_type}')
		#print(f'exception_value: {exception_value}')
		#print(f'exception_traceback: {tb.tb_lineno}')
		#print(f'format_exception: {traceback.format_exception(exception_type, exception_value, exception_traceback)[1]}')
		msg = (f'A Program Error Occurred in {filename} line {line_no}\n'
		f'{error}\n'
		'Please file an issue.')

		text = "".join(traceback.format_exception(exception_type, exception_value, tb))
		self.mainTabs.setCurrentIndex(0)
		self.machinePTE.clear()
		self.machinePTE.appendPlainText('PROGRAM ERROR')
		self.machinePTE.appendPlainText(msg)
		self.machinePTE.appendPlainText('Please open an issue at https://github.com/jethornton/mesact/issues')
		msg = (f'A Program Error Occurred in {filename} line {line_no}\n'
		f'{error}\n'
		'Please file an issue.')
		self.errorMsgOk(msg, 'PROGRAM ERROR' )


def main():
	app = QApplication(sys.argv)
	if float(sys.version[0:3]) < 3.6:
		ex = VersionError()
	else:
		ex = MainWindow()
	sys.exit(app.exec_())

if __name__ == "__main__":
	main()

